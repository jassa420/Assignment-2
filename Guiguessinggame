import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class BirdGame extends JFrame {
    // Constants
    private static final int WINDOW_WIDTH = 800;
    private static final int WINDOW_HEIGHT = 600;
    private static final int BIRD_SIZE = 40;
    private static final int BREAD_SIZE = 20;
    private static final int BUCKET_WIDTH = 80;
    private static final int BUCKET_HEIGHT = 100;
    private static final int HAPPY_POINTS_PER_BIRD = 10;
    private static final int POWER_UP_DURATION = 5000; // 5 seconds

    // Game variables
    private List<Point> birds;
    private Point breadPosition;
    private Point bucketPosition;
    private int happyPoints;
    private int level;
    private boolean gameOver;
    private boolean powerUpActive;
    private long powerUpStartTime;

    public BirdGame() {
        setTitle("Bird Game");
        setSize(WINDOW_WIDTH, WINDOW_HEIGHT);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);
        birds = new ArrayList<>();
        breadPosition = new Point(-100, -100); // initialize bread off-screen
        bucketPosition = new Point(WINDOW_WIDTH / 2 - BUCKET_WIDTH / 2, WINDOW_HEIGHT - BUCKET_HEIGHT);
        happyPoints = 0;
        level = 1;
        gameOver = false;
        powerUpActive = false;
        powerUpStartTime = 0;

        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                breadPosition.setLocation(e.getX() - BREAD_SIZE / 2, e.getY() - BREAD_SIZE / 2);
            }
        });

        spawnBirds(5);

        Timer timer = new Timer(100, e -> {
            if (!gameOver) {
                moveBirds();
                checkCollisions();
                checkPowerUpStatus();
                updateLevel();
                repaint();
            }
        });
        timer.start();
    }

    private void spawnBirds(int count) {
        Random rand = new Random();
        for (int i = 0; i < count; i++) {
            int x = rand.nextInt(WINDOW_WIDTH - BIRD_SIZE);
            int y = rand.nextInt(WINDOW_HEIGHT - BIRD_SIZE - BUCKET_HEIGHT);
            birds.add(new Point(x, y));
        }
    }

    private void moveBirds() {
        Random rand = new Random();
        for (Point bird : birds) {
            bird.translate(rand.nextInt(5) - 2 + level, rand.nextInt(5) - 2 + level);
            bird.x = Math.max(0, Math.min(bird.x, WINDOW_WIDTH - BIRD_SIZE));
            bird.y = Math.max(0, Math.min(bird.y, WINDOW_HEIGHT - BIRD_SIZE - BUCKET_HEIGHT));
        }
    }

    private void checkCollisions() {
        Rectangle breadBounds = new Rectangle(breadPosition.x, breadPosition.y, BREAD_SIZE, BREAD_SIZE);
        Rectangle bucketBounds = new Rectangle(bucketPosition.x, bucketPosition.y, BUCKET_WIDTH, BUCKET_HEIGHT);

        for (int i = birds.size() - 1; i >= 0; i--) {
            Point bird = birds.get(i);
            Rectangle birdBounds = new Rectangle(bird.x, bird.y, BIRD_SIZE, BIRD_SIZE);

            if (birdBounds.intersects(breadBounds)) {
                birds.remove(i);
                happyPoints += (powerUpActive ? HAPPY_POINTS_PER_BIRD * 2 : HAPPY_POINTS_PER_BIRD);
            } else if (birdBounds.intersects(bucketBounds)) {
                birds.remove(i);
                if (!powerUpActive) {
                    happyPoints -= 5;
                    if (happyPoints < 0) {
                        happyPoints = 0;
                    }
                }
            }
        }
    }

    private void checkPowerUpStatus() {
        if (powerUpActive && System.currentTimeMillis() - powerUpStartTime >= POWER_UP_DURATION) {
            powerUpActive = false;
        }
    }

    private void updateLevel() {
        // You can implement more complex logic here to increase the level based on the player's performance.
        if (happyPoints >= level * 100) {
            level++;
        }
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        drawBirds(g);
        drawBread(g);
        drawBucket(g);
        drawHappyPoints(g);
        drawLevel(g);

        if (gameOver) {
            drawGameOver(g);
        }
    }

    private void drawBirds(Graphics g) {
        // Load bird image here and use g.drawImage()
        // Example: Image birdImage = loadImage("bird.png");
        g.setColor(Color.RED);
        for (Point bird : birds) {
            g.fillOval(bird.x, bird.y, BIRD_SIZE, BIRD_SIZE);
        }
    }

    private void drawBread(Graphics g) {
        // Load bread image here and use g.drawImage()
        // Example: Image breadImage = loadImage("bread.png");
        g.setColor(Color.ORANGE);
        g.fillOval(breadPosition.x, breadPosition.y, BREAD_SIZE, BREAD_SIZE);
    }

    private void drawBucket(Graphics g) {
        // Load bucket image here and use g.drawImage()
        // Example: Image bucketImage = loadImage("bucket.png");
        g.setColor(Color.BLUE);
        g.fillRect(bucketPosition.x, bucketPosition.y, BUCKET_WIDTH, BUCKET_HEIGHT);
    }

    private void drawHappyPoints(Graphics g) {
        g.setColor(Color.BLACK);
        g.drawString("Happy Points: " + happyPoints, 20, 20);
    }

    private void drawLevel(Graphics g) {
        g.setColor(Color.BLACK);
        g.drawString("Level: " + level, 20, 40);
    }

    private void drawGameOver(Graphics g) {
        g.setColor(Color.RED);
        g.setFont(new Font("Arial", Font.BOLD, 40));
        String gameOverMsg = "Game Over!";
        int msgWidth = g.getFontMetrics().stringWidth(gameOverMsg);
        g.drawString(gameOverMsg, WINDOW_WIDTH / 2 - msgWidth / 2, WINDOW_HEIGHT / 2);
    }

    // Implement a method to load images (replace this with actual image loading code)
    private Image loadImage(String filename) {
        // Load the image using an image-loading library or javax.imageio.ImageIO
        return null; // Placeholder
    }

    // Implement a method to play sounds (replace this with actual sound playing code)
    private void playSound(String filename) {
        // Play the sound using a sound-playing library or javax.sound.sampled
        // Placeholder
    }

public static void main(String[] args) {
    SwingUtilities.invokeLater(() -> {
        BirdGame game = new BirdGame();
        game.setVisible(true);
    });
}

}
